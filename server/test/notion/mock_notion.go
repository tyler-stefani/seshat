// Code generated by MockGen. DO NOT EDIT.
// Source: notion.go

// Package mock_notion is a generated GoMock package.
package notion_test

import (
	context "context"
	reflect "reflect"

	notion "github.com/dstotijn/go-notion"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreatePage mocks base method.
func (m *MockClient) CreatePage(ctx context.Context, params notion.CreatePageParams) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", ctx, params)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockClientMockRecorder) CreatePage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockClient)(nil).CreatePage), ctx, params)
}

// QueryDatabase mocks base method.
func (m *MockClient) QueryDatabase(ctx context.Context, id string, query *notion.DatabaseQuery) (notion.DatabaseQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDatabase", ctx, id, query)
	ret0, _ := ret[0].(notion.DatabaseQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatabase indicates an expected call of QueryDatabase.
func (mr *MockClientMockRecorder) QueryDatabase(ctx, id, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatabase", reflect.TypeOf((*MockClient)(nil).QueryDatabase), ctx, id, query)
}

// UpdatePage mocks base method.
func (m *MockClient) UpdatePage(ctx context.Context, pageID string, params notion.UpdatePageParams) (notion.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", ctx, pageID, params)
	ret0, _ := ret[0].(notion.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockClientMockRecorder) UpdatePage(ctx, pageID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockClient)(nil).UpdatePage), ctx, pageID, params)
}
